import lzma

def text_to_binary(text):
    """
    Converts a text string to a binary string.

    Args:
        text (str): The input text to be converted.

    Returns:
        str: The corresponding binary string.
    """
    binary_data = ''.join(format(ord(char), '08b') for char in text)
    return binary_data

def binary_to_dna(binary_data):
    """
    Converts binary data to a DNA sequence using LZMA compression and a mapping.

    Args:
        binary_data (str): A string of binary digits (0 and 1).

    Returns:
        str: The corresponding DNA sequence.
    """
    # Define the mapping from 6-bit binary to DNA codons
    binary_to_codon = {
        '000000': 'AAA', '000001': 'AAC', '000010': 'AAG', '000011': 'AAT',
        '000100': 'ACA', '000101': 'ACC', '000110': 'ACG', '000111': 'ACT',
        '001000': 'AGA', '001001': 'AGC', '001010': 'AGG', '001011': 'AGT',
        '001100': 'ATA', '001101': 'ATC', '001110': 'ATG', '001111': 'ATT',
        '010000': 'CAA', '010001': 'CAC', '010010': 'CAG', '010011': 'CAT',
        '010100': 'CCA', '010101': 'CCC', '010110': 'CCG', '010111': 'CCT',
        '011000': 'CGA', '011001': 'CGC', '011010': 'CGG', '011011': 'CGT',
        '011100': 'CTA', '011101': 'CTC', '011110': 'CTG', '011111': 'CTT',
        '100000': 'GAA', '100001': 'GAC', '100010': 'GAG', '100011': 'GAT',
        '100100': 'GCA', '100101': 'GCC', '100110': 'GCG', '100111': 'GCT',
        '101000': 'GGA', '101001': 'GGC', '101010': 'GGG', '101011': 'GGT',
        '101100': 'GTA', '101101': 'GTC', '101110': 'GTG', '101111': 'GTT',
        '110000': 'TAA', '110001': 'TAC', '110010': 'TAG', '110011': 'TAT',
        '110100': 'TCA', '110101': 'TCC', '110110': 'TCG', '110111': 'TCT',
        '111000': 'TGA', '111001': 'TGC', '111010': 'TGG', '111011': 'TGT',
        '111100': 'TTA', '111101': 'TTC', '111110': 'TTG', '111111': 'TTT',
    }

    # Compress the binary data using LZMA
    compressed_binary = lzma.compress(binary_data.encode(), format=lzma.FORMAT_ALONE)

    # Convert the compressed binary data to DNA
    compressed_binary_string = ''.join(f"{byte:08b}" for byte in compressed_binary)
    binary_groups = [compressed_binary_string[i:i+6] for i in range(0, len(compressed_binary_string), 6)]
    if len(binary_groups[-1]) < 6:
        binary_groups[-1] = binary_groups[-1].ljust(6, '0')

    dna_sequence = ''.join(binary_to_codon[group] for group in binary_groups)

    return dna_sequence

def dna_to_binary(dna_sequence):
    """
    Converts a DNA sequence to binary data using a mapping.

    Args:
        dna_sequence (str): The DNA sequence to be converted.

    Returns:
        str: The corresponding binary data.
    """
    # Define the mapping from DNA codons to 6-bit binary
    dna_to_binary = {
        'AAA': '000000', 'AAC': '000001', 'AAG': '000010', 'AAT': '000011',
        'ACA': '000100', 'ACC': '000101', 'ACG': '000110', 'ACT': '000111',
        'AGA': '001000', 'AGC': '001001', 'AGG': '001010', 'AGT': '001011',
        'ATA': '001100', 'ATC': '001101', 'ATG': '001110', 'ATT': '001111',
        'CAA': '010000', 'CAC': '010001', 'CAG': '010010', 'CAT': '010011',
        'CCA': '010100', 'CCC': '010101', 'CCG': '010110', 'CCT': '010111',
        'CGA': '011000', 'CGC': '011001', 'CGG': '011010', 'CGT': '011011',
        'CTA': '011100', 'CTC': '011101', 'CTG': '011110', 'CTT': '011111',
        'GAA': '100000', 'GAC': '100001', 'GAG': '100010', 'GAT': '100011',
        'GCA': '100100', 'GCC': '100101', 'GCG': '100110', 'GCT': '100111',
        'GGA': '101000', 'GGC': '101001', 'GGG': '101010', 'GGT': '101011',
        'GTA': '101100', 'GTC': '101101', 'GTG': '101110', 'GTT': '101111',
        'TAA': '110000', 'TAC': '110001', 'TAG': '110010', 'TAT': '110011',
        'TCA': '110100', 'TCC': '110101', 'TCG': '110110', 'TCT': '110111',
        'TGA': '111000', 'TGC': '111001', 'TGG': '111010', 'TGT': '111011',
        'TTA': '111100', 'TTC': '111101', 'TTG': '111110', 'TTT': '111111',
    }

    # Convert the DNA sequence to binary
    binary_groups = [dna_sequence[i:i+3] for i in range(0, len(dna_sequence), 3)]
    binary_data = ''.join(dna_to_binary[group] for group in binary_groups)

    # Decompress the binary data using LZMA
    decompressed_binary = lzma.decompress(binary_data.encode())

    return decompressed_binary.decode()

# Example usage
input_text = "shazam"
binary_data = text_to_binary(input_text)
print("Text input:", input_text)
print("Binary data:", binary_data)
dna_sequence = binary_to_dna(binary_data)
print("DNA sequence:", dna_sequence)

original_text = dna_to_binary(dna_sequence)
print("Original text:", original_text)
