import lzma  # Python's lzma module provides LZMA compression

def text_to_binary(text):
    """
    Converts a text string to a binary string.

    Args:
        text (str): The input text to be converted.

    Returns:
        str: The corresponding binary string.
    """
    binary_data = ''.join(format(ord(char), '08b') for char in text)
    return binary_data

def binary_to_dna(binary_data):
    """
    Converts binary data to a DNA sequence using LZMA compression and a mapping.

    Args:
        binary_data (str): A string of binary digits (0 and 1).

    Returns:
        str: The corresponding DNA sequence.
    """
    # Define the mapping from 3-bit binary to DNA codons
    binary_to_codon = {
        '000': 'AAA', '001': 'AAC', '010': 'AAG', '011': 'AAT',
        '100': 'ACA', '101': 'ACC', '110': 'ACG', '111': 'ACT',
        '000': 'AGA', '001': 'AGC', '010': 'AGG', '011': 'AGT',
        '100': 'ATA', '101': 'ATC', '110': 'ATG', '111': 'ATT',
        '000': 'CAA', '001': 'CAC', '010': 'CAG', '011': 'CAT',
        '100': 'CCA', '101': 'CCC', '110': 'CCG', '111': 'CCT',
        '000': 'CGA', '001': 'CGC', '010': 'CGG', '011': 'CGT',
        '100': 'CTA', '101': 'CTC', '110': 'CTG', '111': 'CTT',
        '000': 'GAA', '001': 'GAC', '010': 'GAG', '011': 'GAT',
        '100': 'GCA', '101': 'GCC', '110': 'GCG', '111': 'GCT',
        '000': 'GGA', '001': 'GGC', '010': 'GGG', '011': 'GGT',
        '100': 'GTA', '101': 'GTC', '110': 'GTG', '111': 'GTT',
        '000': 'TAA', '001': 'TAC', '010': 'TAG', '011': 'TAT',
        '100': 'TCA', '101': 'TCC', '110': 'TCG', '111': 'TCT',
        '000': 'TGA', '001': 'TGC', '010': 'TGG', '011': 'TGT',
        '100': 'TTA', '101': 'TTC', '110': 'TTG', '111': 'TTT',
    }

    # Compress the binary data using LZMA
    compressed_binary = lzma.compress(binary_data.encode(), format=lzma.FORMAT_ALONE)

    # Convert the compressed binary data to DNA
    compressed_binary_string = ''.join(f"{byte:08b}" for byte in compressed_binary)
    binary_groups = [compressed_binary_string[i:i+3] for i in range(0, len(compressed_binary_string), 3)]
    if len(binary_groups[-1]) < 3:
        binary_groups[-1] = binary_groups[-1].ljust(3, '0')

    dna_sequence = ''.join(binary_to_codon[group] for group in binary_groups)

    return dna_sequence

def dna_to_binary(dna_sequence):
    """
    Converts a DNA sequence to binary data using a mapping.

    Args:
        dna_sequence (str): The DNA sequence to be converted.

    Returns:
        str: The corresponding binary data.
    """
    # Define the mapping from DNA codons to 3-bit binary
    dna_to_binary = {
        'AAA': '000', 'AAC': '001', 'AAG': '010', 'AAT': '011',
        'ACA': '100', 'ACC': '101', 'ACG': '110', 'ACT': '111',
        'AGA': '000', 'AGC': '001', 'AGG': '010', 'AGT': '011',
        'ATA': '100', 'ATC': '101', 'ATG': '110', 'ATT': '111',
        'CAA': '000', 'CAC': '001', 'CAG': '010', 'CAT': '011',
        'CCA': '100', 'CCC': '101', 'CCG': '110', 'CCT': '111',
        'CGA': '000', 'CGC': '001', 'CGG': '010', 'CGT': '011',
        'CTA': '100', 'CTC': '101', 'CTG': '110', 'CTT': '111',
        'GAA': '000', 'GAC': '001', 'GAG': '010', 'GAT': '011',
        'GCA': '100', 'GCC': '101', 'GCG': '110', 'GCT': '111',
        'GGA': '000', 'GGC': '001', 'GGG': '010', 'GGT': '011',
        'GTA': '100', 'GTC': '101', 'GTG': '110', 'GTT': '111',
        'TAA': '000', 'TAC': '001', 'TAG': '010', 'TAT': '011',
        'TCA': '100', 'TCC': '101', 'TCG': '110', 'TCT': '111',
        'TGA': '000', 'TGC': '001', 'TGG': '010', 'TGT': '011',
        'TTA': '100', 'TTC': '101', 'TTG': '110', 'TTT': '111',
    }

    # Convert the DNA sequence to binary
    binary_groups = [dna_sequence[i:i+3] for i in range(0, len(dna_sequence), 3)]
    binary_data = ''.join(dna_to_binary[group] for group in binary_groups)

    # Decompress the binary data using LZMA
    decompressed_binary = lzma.decompress(binary_data.encode())

    return decompressed_binary.decode()

# Example usage
input_text = "imaad"
binary_data = text_to_binary(input_text)
print("Text input:", input_text)
print("Binary data:", binary_data)
dna_sequence = binary_to_dna(binary_data)
print("DNA sequence:", dna_sequence)

original_text = dna_to_binary(dna_sequence)
print("Original text:", original_text)
